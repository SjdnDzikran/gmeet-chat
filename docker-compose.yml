services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    dns:
      - 8.8.8.8
      - 1.1.1.1  

  rabbitmq:
    image: rabbitmq:3-management-alpine # Using the image with management plugin
    ports:
      - "5672:5672"   # AMQP protocol port
      - "15672:15672" # Management UI port (access via http://localhost:15672)
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq # Persist RabbitMQ data (optional for dev)
    healthcheck: # Optional: wait for RabbitMQ to be ready
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  chat-service:
    build:
      context: ./chat-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080" # Expose chat-service port (useful for direct testing, Nginx will be main entry)
    environment:
      - PORT=8080
      - RABBITMQ_URL=amqp://rabbitmq # Service name 'rabbitmq' will resolve to the RabbitMQ container IP
    depends_on:
      rabbitmq: # Wait for RabbitMQ to be healthy (if healthcheck is defined) or just started
        condition: service_healthy # Use this if rabbitmq has a healthcheck
        # condition: service_started # Use this if no healthcheck or for simpler startup order
    # volumes:
    #  - ./chat-service/src:/usr/src/app/src # Mount src for development (if using nodemon in Docker)
                                           # For production, you'd typically not mount src.
                                           # Ensure your Dockerfile handles production builds correctly.
      # If your "dev" script in package.json (used by nodemon) compiles TS on the fly (like ts-node-dev),
      # you might adjust volumes. The current Dockerfile builds TS first.
  
  redis:
    image: redis:7-alpine # Using a recent Alpine version of Redis
    ports:
      - "6379:6379" # Expose Redis port to host (optional, for direct access/debugging)
    volumes:
      - redis_data:/data # Persist Redis data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  room-service:
    build:
      context: ./room-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081" # Expose for direct testing; Nginx will be main entry for API
    environment:
      - PORT=8081
      - REDIS_URL=redis://redis:6379 # Service name 'redis' will resolve to Redis container IP
    depends_on:
      redis: # Wait for Redis to be healthy or started
        condition: service_healthy
        # condition: service_started # if no healthcheck
    # volumes: # Add for development if you want live reload for room-service
    #   - ./room-service/src:/usr/src/app/src

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - frontend
      - chat-service
      - room-service # Nginx now also depends on room-service

volumes:
  rabbitmq_data:
  redis_data:    # New volume for Redis persistence
